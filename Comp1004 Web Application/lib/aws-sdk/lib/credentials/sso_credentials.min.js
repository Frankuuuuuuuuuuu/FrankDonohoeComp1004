/**
 * Minified by jsDelivr using Terser v5.15.1.
 * Original file: /npm/aws-sdk@2.1342.0/lib/credentials/sso_credentials.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
var AWS=require("../core"),path=require("path"),crypto=require("crypto"),iniLoader=AWS.util.iniLoader;AWS.SsoCredentials=AWS.util.inherit(AWS.Credentials,{constructor:function(e){AWS.Credentials.call(this),e=e||{},this.errorCode="SsoCredentialsProviderFailure",this.expired=!0,this.filename=e.filename,this.profile=e.profile||process.env.AWS_PROFILE||AWS.util.defaultProfile,this.service=e.ssoClient,this.httpOptions=e.httpOptions||null,this.get(e.callback||AWS.util.fn.noop)},load:function(e){var r=this;try{var s=AWS.util.getProfilesFromSharedConfig(iniLoader,this.filename)[this.profile]||{};if(0===Object.keys(s).length)throw AWS.util.error(new Error("Profile "+this.profile+" not found"),{code:r.errorCode});if(s.sso_session){if(!s.sso_account_id||!s.sso_role_name)throw AWS.util.error(new Error("Profile "+this.profile+" with session "+s.sso_session+' does not have valid SSO credentials. Required parameters "sso_account_id", "sso_session", "sso_role_name". Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html'),{code:r.errorCode})}else if(!(s.sso_start_url&&s.sso_account_id&&s.sso_region&&s.sso_role_name))throw AWS.util.error(new Error("Profile "+this.profile+' does not have valid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html'),{code:r.errorCode});this.getToken(this.profile,s,(function(o,i){if(o)return e(o);var t={accessToken:i,accountId:s.sso_account_id,roleName:s.sso_role_name};r.service&&r.service.config.region===s.sso_region||(r.service=new AWS.SSO({region:s.sso_region,httpOptions:r.httpOptions})),r.service.getRoleCredentials(t,(function(s,o){if(!s&&o&&o.roleCredentials){if(!(o.roleCredentials.accessKeyId&&o.roleCredentials.secretAccessKey&&o.roleCredentials.sessionToken&&o.roleCredentials.expiration))throw AWS.util.error(new Error("SSO returns an invalid temporary credential."));r.expired=!1,r.accessKeyId=o.roleCredentials.accessKeyId,r.secretAccessKey=o.roleCredentials.secretAccessKey,r.sessionToken=o.roleCredentials.sessionToken,r.expireTime=new Date(o.roleCredentials.expiration),e(null)}else e(AWS.util.error(s||new Error('Please log in using "aws sso login"'),{code:r.errorCode}),null)}))}))}catch(r){e(r)}},getToken:function(e,r,s){if(r.sso_session){var o=AWS.util.iniLoader.loadSsoSessionsFrom()[r.sso_session];Object.assign(r,o);var i=new AWS.SSOTokenProvider({profile:e});i.load((function(e){return e?s(e):s(null,i.token)}))}else try{var t=crypto.createHash("sha1").update(r.sso_start_url).digest("hex")+".json",n=path.join(iniLoader.getHomeDir(),".aws","sso","cache",t),l=AWS.util.readFileSync(n),a=null;if(l&&(a=JSON.parse(l)),!a)throw AWS.util.error(new Error("Cached credentials not found under "+this.profile+" profile. Please make sure you log in with aws sso login first"),{code:this.errorCode});if(!(a.startUrl&&a.region&&a.accessToken&&a.expiresAt))throw AWS.util.error(new Error("Cached credentials are missing required properties. Try running aws sso login."));if(new Date(a.expiresAt).getTime()-Date.now()<=9e5)throw AWS.util.error(new Error("The SSO session associated with this profile has expired. To refresh this SSO session run aws sso login with the corresponding profile."));return s(null,a.accessToken)}catch(e){return s(e,null)}},refresh:function(e){iniLoader.clearCachedFiles(),this.coalesceRefresh(e||AWS.util.fn.callback)}});
//# sourceMappingURL=/sm/6fa8fd060e40079a9dec00a87ea4b5da63e153e75201189accdab73d38d00c15.map